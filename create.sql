CREATE TABLE rental_office (
    rental_id INTEGER GENERATED BY DEFAULT AS IDENTITY,
    address VARCHAR(255) NOT NULL,
    office_name VARCHAR(255) DEFAULT 'No Name',
    CONSTRAINT fk_rental_office PRIMARY KEY (rental_id)
);

CREATE TABLE customer(
    driving_license_number INTEGER NOT NULL,
    c_name VARCHAR(255) NOT NULL,
    contact_info VARCHAR(255) NOT NULL,
    rental_id INTEGER NOT NULL,
    CONSTRAINT pk_customer PRIMARY KEY (driving_license_number),
    CONSTRAINT fk_rental
    FOREIGN KEY (rental_id) REFERENCES rental_office
    ON DELETE CASCADE
);

CREATE TABLE friends (
    driving_license_number_1 INTEGER NOT NULL,
    driving_license_number_2 INTEGER NOT NULL,
    CONSTRAINT pk_friends PRIMARY KEY (driving_license_number_1, driving_license_number_2),
    CONSTRAINT fk_customer1
    FOREIGN KEY (driving_license_number_1) REFERENCES customer ON DELETE CASCADE,
    CONSTRAINT fk_customer2
    FOREIGN KEY (driving_license_number_2) REFERENCES customer
    ON DELETE CASCADE
);

CREATE TABLE car (
    plate_number VARCHAR(255) NOT NULL,
    color VARCHAR(255) NOT NULL,
    price INTEGER NOT NULL,
    rental_id INTEGER NOT NULL,
    CONSTRAINT car_pk PRIMARY KEY (plate_number),
    CONSTRAINT fk_rental2
    FOREIGN KEY (rental_id) REFERENCES rental_office
    ON DELETE CASCADE
);

CREATE TABLE truck (
    plate_number VARCHAR(255) UNIQUE NOT NULL,
    load_capacity INTEGER NOT NULL,
    length INTEGER NOT NULL,
    number_of_pallet_spaces INTEGER NOT NULL,
    CONSTRAINT fk_car
    FOREIGN KEY (plate_number)
    REFERENCES car(plate_number)
    ON DELETE CASCADE
);

CREATE TABLE passenger_car (
    plate_number VARCHAR(255) UNIQUE NOT NULL,
    max_speed INTEGER NOT NULL,
    number_of_seats INTEGER NOT NULL,
    fuel_type VARCHAR(255) NOT NULL,
    CHECK (max_speed BETWEEN 0 and 400),
    CONSTRAINT fk_car2
    FOREIGN KEY (plate_number)
    REFERENCES car(plate_number)
    ON DELETE CASCADE
);

CREATE TABLE reservation (
    reservation_id INTEGER GENERATED BY DEFAULT AS IDENTITY,
    reservation_begin DATE NOT NULL,
    reservation_end DATE NOT NULL,
    driving_license_number INTEGER NOT NULL,
    plate_number VARCHAR(255) NOT NULL,
    CONSTRAINT pk_reservation PRIMARY KEY (reservation_id),
    CONSTRAINT fk_driving_license_number
    FOREIGN KEY (driving_license_number) REFERENCES customer ON DELETE CASCADE,
    FOREIGN KEY (plate_number) REFERENCES car ON DELETE CASCADE
);


CREATE SEQUENCE seq_employee_id
  START WITH 1
  INCREMENT BY 1;

CREATE TABLE employee (
    employee_id INTEGER NOT NULL,
    name_e VARCHAR(255) NOT NULL,
    insurance_number INTEGER NOT NULL,
    rental_id INTEGER NOT NULL,
    PRIMARY KEY (employee_id),
    CONSTRAINT fk_rental3
    FOREIGN KEY (rental_id) REFERENCES rental_office
    ON DELETE CASCADE
);

CREATE OR REPLACE TRIGGER tr_employee_id
    BEFORE INSERT ON employee
    FOR EACH ROW
  BEGIN
    SELECT seq_employee_id.CURRVAL
    INTO :new.employee_id
    FROM dual;
    dbms_output.put_line('Created Employee with ID ' || :new.employee_id);
  END;
/
set serveroutput on

CREATE TABLE delivery (
    delivery_id INTEGER GENERATED BY DEFAULT AS IDENTITY,
    employee_id INTEGER NOT NULL,
    plate_number VARCHAR(255) NOT NULL,
    driving_license_number INTEGER NOT NULL,
    CONSTRAINT pk_delivery PRIMARY KEY (delivery_id),
    FOREIGN KEY(employee_id) REFERENCES employee ON DELETE CASCADE,
    FOREIGN KEY(plate_number) REFERENCES car ON DELETE CASCADE,
    CONSTRAINT fk_rental4
    FOREIGN KEY (driving_license_number) REFERENCES customer ON DELETE CASCADE
);

create or replace NONEDITIONABLE PROCEDURE show_customer_in_office (rental_idn IN INTEGER, number_of_customer OUT INTEGER)
AS
BEGIN
   SELECT COUNT(*) INTO number_of_customer  FROM customer WHERE rental_id = rental_idn;
END;
/

CREATE OR REPLACE TRIGGER tr_show_rental_office
AFTER INSERT ON rental_office
FOR EACH ROW
BEGIN
  DBMS_OUTPUT.PUT_LINE('Rental ID: ' || :NEW.rental_id || ', Office Name: ' || :NEW.office_name);
END;
/

SET SERVEROUTPUT ON
